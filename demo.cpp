#include "reflect.hpp"
#include <cstddef>
#include <string_view>
#include <iostream>
#include <typeindex>
#include <unordered_map>

struct __attribute__((annotate("reflect"))) test{
    public:
    int testname;
    int testname2;
    double testname3;
    struct  test2{
        int testname;
    };
    test2 testname4;

};

// --------------------------------
// here will be generated by codegen
namespace Reflect {
template<>
constexpr staticReflectVar staticReflect<test>(test &c, std::string_view name) {
    constexpr auto keynames = std::array<map, 3>{
        map{"testname", offsetof(test, testname), sizeof(int)},
        map{"testname2", offsetof(test, testname2), sizeof(int)},
        map{"testname3", offsetof(test, testname3), sizeof(double)}
    };

    for (const auto& keyname : keynames){
        if (keyname.keyname == name){
            return staticReflectVar{&c, keyname.offset, keyname.size};
        }
    }

    // error
    return staticReflectVar{};
}
template <>
auto& typeInfo<test>() {
    const static std::unordered_map<std::string_view, typeinfo> typeinfos = {
        {"testname", {offsetof(test, testname), sizeof(int), std::type_index(typeid(int))}},
        {"testname2", {offsetof(test, testname2), sizeof(int), std::type_index(typeid(int))}},
        {"testname3", {offsetof(test, testname3), sizeof(double), std::type_index(typeid(double))}}
    };

    return typeinfos;
}
template <>
ReflectVar reflect<test>(test &c, std::string_view name) {
    auto& typeinfos = typeInfo<test>();
    auto it = typeinfos.find(name);
    if (it != typeinfos.end()){
        return ReflectVar{&c, it->second};
    }
    // error
    return ReflectVar{};
}
}
// end
// --------------------------------
test temp = {1,2};
int main(){
    using namespace Reflect;
    constexpr auto b = staticReflect(temp, "testname");
    if constexpr (!b.isNull()){
        std::cout << b.getValue<int>() << std::endl;
        b.setValue<int>(3);
        std::cout << b.getValue<int>() << std::endl;
    }


    test temp1 = {1,2};
    std::string_view keyname = "testname";
    auto testname = reflect(temp1, keyname);
    if (!testname.isNull()){
        if (testname.getInfo().typeindex == std::type_index(typeid(int))){
            std::cout << "type is int" << std::endl;
            std::cout << testname.getValue<int>() << std::endl;
            testname.setValue<int>(3);

            std::cout << testname.getValue<int>() << std::endl;
        }
    }    

    return 0;
}